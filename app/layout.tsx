import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import { SessionProvider } from "next-auth/react";
import { Toaster } from "@/components/ui/toaster";
import { LogoProvider } from "@/context/LogoContext";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

// Add a function to fetch branding settings
async function getBrandingSettings() {
  try {
    // Use absolute URL to avoid routing issues in server components
    const protocol = process.env.NODE_ENV === 'production' ? 'https' : 'http';
    const host = process.env.VERCEL_URL || 'localhost:3000';
    const url = `${protocol}://${host}/api/branding`;
    
    console.log('Fetching branding settings from:', url);
    
    const response = await fetch(url, { 
      next: { revalidate: 3600 },
      cache: 'no-store' 
    });
    
    if (!response.ok) {
      console.error('Failed to fetch branding settings:', response.status, response.statusText);
      return null;
    }
    
    const data = await response.json();
    console.log('Branding settings fetched successfully:', data);
    return data;
  } catch (error) {
    console.error("Error fetching branding settings:", error);
    return null;
  }
}

export default async function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  // Fetch branding settings
  const brandingSettings = await getBrandingSettings();
  const siteName = brandingSettings?.siteName || 'Reels Creator';
  const faviconUrl = brandingSettings?.faviconUrl || '/favicon.ico';
  
  return (
    <html lang="en">
      <head>
        <link rel="icon" href={faviconUrl} />
        <title>{siteName}</title>
      </head>
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        <SessionProvider>
          <LogoProvider>
            {children}
            <Toaster />
          </LogoProvider>
        </SessionProvider>
      </body>
    </html>
  );
}
